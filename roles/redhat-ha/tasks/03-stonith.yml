---
- name: Checking if the global STONITH timeout is set
  command:
    cmd: pcs property show stonith-timeout
  register: stonith
  changed_when: false

- debug:
    msg: "{{ stonith }}"  

- debug:
    msg: "{{ 'stonith-timeout: ' + stonith_timeout|string + 's' }}"

- name: Ensuring the global STONITH timeout is set
  command:
    cmd: "pcs property set stonith-timeout={{ stonith_timeout }}s"
  when: "('stonith-timeout: ' + stonith_timeout|string + 's')
        not in stonith['stdout']"
#
#- debug:
#    msg: "{{ hostvars[item]['ipmi_ip'] }}"
#    #msg: "{{ 'fence_' + hostvars[item]['inventory_hostname_short'] }}"
#  loop: "{{ groups['nodes-prv'] }}"
#  run_once: true
    
- block:
  - set_fact:
      fence_agent_attributes: "{{ fence_agent_attributes | default([]) + [ {'id': 'fence_' + hostvars[item]['inventory_hostname_short'], 'key_file': stonith_kvm_key_file_path, 'port': hostvars[item]['inventory_hostname_short'], 'node': hostvars[item]['inventory_hostname']  } ] }}"
    loop: "{{ groups['nodes-prv'] }}"
    run_once: true

  - set_fact:
      fence_agent: fence_xvm

  - name: Ensuring the required ports are open
    ansible.posix.firewalld:
      port: 1229/tcp
      permanent: yes
      state: enabled
      immediate: yes
  
  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: /etc/cluster/
      state: directory
      mode: '0755'
  
  - name: Copy file with owner and permissions
    ansible.builtin.copy:
      src: /tmp/fence_xvm.key
      dest: /etc/cluster/fence_xvm.key
      owner: root
      group: root
      mode: '0644'

  when: ansible_system_vendor == "Red Hat"

- block:  
  - set_fact:
      fence_agent_attributes: "{{ fence_agent_attributes | default([]) + [ {'id': 'fence_' + hostvars[item]['inventory_hostname_short'], 'ipaddr': stonith_cisco_ucs_ipaddr, 'port': inventory_hostname_short, 'login': stonith_cisco_ucs_login, 'password': stonith_cisco_ucs_passwd, 'suborg': stonith_cisco_ucs_suborg } ] }}"
      #fence_agent_attributes: "{{ fence_agent_attributes | default([]) + [ {'id': 'fence_' + hostvars[item]['inventory_hostname_short'], 'ipaddr': hostvars[item]['stonith_cisco_ucs_ipaddr'], 'port': hostvars[item]['inventory_hostname_short'], 'login': hostvars[item]['stonith_cisco_ucs_login'], 'password': hostvars[item]['stonith_cisco_ucs_passwd'], 'suborg': hostvars[item]['stonith_cisco_ucs_suborg'] } ] }}"
    loop: "{{ groups['nodes-prv'] }}"
    run_once: true

  - set_fact:
      fence_agent: fence_cisco_ucs

  when: ansible_system_vendor == "Cisco Systems Inc"
- block:
  - set_fact:
      fence_agent_attributes: "{{ fence_agent_attributes | default([]) + [ {'id': 'fence_' + hostvars[item]['inventory_hostname_short'], 'ip': hostvars[item]['stonith_ipmi_ip'], 'node': hostvars[item]['inventory_hostname'], 'login': stonith_ipmi_login, 'password': stonith_ipmi_password } ] }}"
    loop: "{{ groups['nodes-prv'] }}"
    run_once: true

  - set_fact:
      fence_agent: fence_ipmilan
  when: ansible_system_vendor != "Cisco Systems Inc" and ansible_system_vendor != "Red Hat"

- debug:
    msg: 
      - "{{ fence_agent_attributes }}"  
      - "{{ fence_agent }}"
  run_once: true
  no_log: false


- name: Ensuring the STONITH resources exist
  include_tasks: "create_{{ fence_agent }}.yml"
  loop: "{{ fence_agent_attributes }}"
  run_once: true

...
