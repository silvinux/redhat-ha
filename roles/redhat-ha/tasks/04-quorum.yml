---
#- debug:
#    msg: "{{ groups['nodes'] + groups['quorum'] }}"

#- name: Preparing | Ensure required repos are enabled
#  community.general.rhsm_repository:
#    name: "{{ ha_cluster_rhsm_repos }}"
#    state: enabled
#  when: groups['nodes'] and groups['quorum'] 
#  #when: ('quorum' in group_names)
#  #when: groups['nodes'] and groups['quorum'] 
#  #when: ('nodes' in group_names) and ('quorum' in group_names)
#
- block:  
  #- name: Ensuring the cluster packages are present
  #  ansible.builtin.dnf:
  #    name: "{{ ha_quorum_cluster_packages }}"
  #    state: present

  #- name: Ensuring the required ports are open
  #  ansible.posix.firewalld:
  #    service: "{{ item }}"
  #    permanent: yes
  #    state: enabled
  #    immediate: yes
  #  loop: "{{ ha_cluster_fw_ports }}"
  #
  #- name: Ensuring the password for hacluster is configured
  #  user:
  #    name: hacluster
  #    password: "{{ ha_cluster_password | password_hash('sha512') }}"
  #
  #- name: Ensuring the pcsd service is started and enabled
  #  service:
  #    name: pcsd
  #    state: started
  #    enabled: yes
  - name: get service facts
    service_facts:

  - name: try to work out how to access the service
    debug:
      msg: 
        - "{{ ansible_facts.services['corosync-qnetd.service'] }}"
        - "{{ ansible_facts.services['corosync-qnetd.service'].state }}"

  - name: Checking if the STONITH resource exists
    command:
      cmd: "pcs qdevice status net"
    register: pcs_qdevice_status_net_exits
    failed_when: false
    changed_when: false

  - name: Ensuring the cluster nodes are authenticated
    ansible.builtin.command:
      cmd: "pcs qdevice setup model net --enable --start"
    register: pcs_device_setup_model_net_enable
    when: pcs_qdevice_status_net_exits['rc'] != 0 and ansible_facts.services['corosync-qnetd.service'].state == 'inactive'

  when: ('quorum' in group_names)

- block:

  - name: Ensuring the cluster packages are present
    ansible.builtin.dnf:
      name: "{{ ha_quorum_dev_system_packages }}"
      state: present

  - name: Ensuring the cluster nodes are authenticated
    ansible.builtin.command:
      cmd: "pcs host auth -u hacluster -p {{ ha_cluster_password }}
            {{ groups['quorum'] | join(' ') }}"
    register: auth_cluster
    changed_when: "'Authorized' in auth_cluster['stdout']"
    run_once: true

  - debug:
      msg: "host={{ groups['quorum'][0] }}"

  - name: Ensuring the cluster nodes are authenticated
    ansible.builtin.command:
      cmd: "pcs quorum device add model net host={{ groups['quorum'][0] }} algorithm=ffsplit"
      #register: auth_cluster
      #changed_when: "'Authorized' in auth_cluster['stdout']"
    run_once: true

  when: ('nodes' in group_names)

...
