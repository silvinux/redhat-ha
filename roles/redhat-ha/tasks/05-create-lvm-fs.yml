---
- name: CREATE LVM FS | Ensure system_id_source is set to uname in lvm.conf
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    regex: "\tsystem_id_source =.*"
    line: "\tsystem_id_source = \"uname\""
    state: present
    backup: yes
  register: system_id_source_output

- name: CREATE LVM FS | Confirming LVM uses the host name as the VG system ID ï¿¼
  ansible.builtin.command:
    cmd: lvm systemid
  register: lvm_systemid_output
  changed_when: no
  failed_when: "'system ID: ' + ansible_nodename not in lvm_systemid_output.stdout"    

- name: CREATE LVM FS | Ensuring auto_activation_volume_list is configured at lvm.conf
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    insertafter: "\t# auto_activation_volume_list =.*"
    line: "\tauto_activation_volume_list = {{ auto_activation_local_volume_group_list | replace(\"'\",'\"') }}"
    state: present
    backup: yes
  register: auto_activation_volume_output  

- block:  
  - name: "CREATE LVM FS | Create a copy of /boot/initramfs-{{ ansible_kernel }}.img"
    ansible.builtin.copy:
      src: "/boot/initramfs-{{ ansible_kernel }}.img"
      dest: "/boot/initramfs-{{ ansible_kernel }}.bak.{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}.img"
      remote_src: yes
      
  - name: CREATE LVM FS | Rebuild the initial ramdisk image
    ansible.builtin.command:
      cmd: "dracut -f -v"
    register: dracut_f_v_output    

  when: "{{ auto_activation_volume_output.changed }} != false or ( {{ system_id_source_output.changed }} != false and 'system ID: ' + ansible_nodename in lvm_systemid_output.stdout)"

- block:
  - name:  CREATE LVM FS | Scheduled Reboot
    reboot:
      pre_reboot_delay: "{{ reboot_pre_delay }}"
      post_reboot_delay: "{{ reboot_post_delay }}"
      reboot_timeout: "{{ reboot_timeout }}"
      test_command: "{{ reboot_test_command }}"

  - name: CREATE LVM FS | Populate storage devices raw list with all devices that needs to be partioned
    set_fact:
      ha_storage_devices_raw: "{{ ha_storage_devices_raw | default([]) + item.ha_storage_devices  }}"
    loop: "{{ ha_lvm_fs_list }}"
  
  - name: CREATE LVM FS | Create a new primary partition
    community.general.parted:
      device: "{{ item }}"
      number: 1
      state: present
    loop: "{{ ha_storage_devices_raw }}"
    
  - name: CREATE LVM FS | "Create a volume group on top of {{ item.ha_storage_devices }}"
    community.general.lvg:
      vg: "{{ item.ha_vg_name }}"
      pvs: "{{ item.ha_storage_devices | product(['1']) | map('join') | list }}"
    loop: "{{ ha_lvm_fs_list }}"
  
  - name: CREATE LVM FS | "Create logical volume {{ item.1.lvname }} on volume groups {{ item.0.ha_vg_name }}"
    community.general.lvol:
      vg: "{{ item.0.ha_vg_name}}" 
      lv:  "{{ item.1.lvname}}"
      size: "{{ item.1.lvsize }}"
    loop: "{{ ha_lvm_fs_list|subelements('ha_fs') }}"
  
  - name: CREATE LVM FS | "Create filesystem {{ item.1.fstype }} over /dev/{{ item.0.ha_vg_name }}/{{ item.1.lvname }}"
    community.general.filesystem:
      fstype: "{{ item.1.fstype }}"
      dev: "/dev/{{ item.0.ha_vg_name }}/{{ item.1.lvname }}"
    loop: "{{ ha_lvm_fs_list|subelements('ha_fs') }}"

  run_once: true  
  when: 
    - dracut_f_v_output is defined 
    - dracut_f_v_output.rc == 0
    - "'Creating initramfs image file \\'/boot/initramfs-{{ ansible_kernel }}.img\\' done' in dracut_f_v_output.stderr"
...
